de1 <- melt(errdat, id="Variables_used", value.name="err")
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom")
de1 <- melt(errdat, id="Variables_used", value.name="err")
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom")
?scale_y_continuous
de1 <- melt(errdat, id="Variables_used", value.name="err")
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5)) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom")
de1 <- melt(errdat, id="Variables_used", value.name="err")
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5), minor_breaks = seq(0,4,by= 0.1)) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom")
de1 <- melt(errdat, id="Variables_used", value.name="err")
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5), minor_breaks = seq(0,4,by = 0.1)) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom")
seq(0,4,by = 0.1)
de1 <- melt(errdat, id="Variables_used", value.name="err")
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 1), minor_breaks = seq(0,4,by = 0.5)) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom")
de1 <- melt(errdat, id="Variables_used", value.name="err")
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5), minor_breaks = seq(0,4,by = 0.1)) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom")
de1 <- melt(errdat, id="Variables_used", value.name="err")
insetplot <- ggplotGrob(
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 ), minor_breaks = seq(0,4,by = 0.1)) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom")
)
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 ), minor_breaks = seq(0,4,by = 0.1)) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom") +
annotation_custom(
grob = insetplot,
xmin = 24,
xmax = Inf,
ymin = 2,
ymax = Inf
)
de1 <- melt(errdat, id="Variables_used", value.name="err")
insetplot <- ggplotGrob(
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 ), minor_breaks = seq(0,4,by = 0.1)) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom")
)
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 ), minor_breaks = seq(0,4,by = 0.1)) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom") +
annotation_custom(
grob = insetplot,
xmin = 24,
xmax = Inf,
ymin = 1.25,
ymax = Inf
)
de1 <- melt(errdat, id="Variables_used", value.name="err")
insetplot <- ggplotGrob(
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="", y="") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 )) +
theme_classic() + theme(legend.position = "none")
)
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 )) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom") +
annotation_custom(
grob = insetplot,
xmin = 24,
xmax = Inf,
ymin = 1.25,
ymax = Inf
)
de1 <- melt(errdat, id="Variables_used", value.name="err")
insetplot <- ggplotGrob(
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="", y="") +
scale_y_continuous(limits = c(0,0.4), breaks = seq(0,0.5,by = 0.05 )) +
coord_cartesian(ylim=c(0,0.5))
theme_classic() + theme(legend.position = "none")
de1 <- melt(errdat, id="Variables_used", value.name="err")
insetplot <- ggplotGrob(
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="", y="") +
scale_y_continuous(limits = c(0,0.4), breaks = seq(0,0.5,by = 0.05 )) +
coord_cartesian(ylim=c(0,0.5)) +
theme_classic() + theme(legend.position = "none")
)
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 )) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom") +
annotation_custom(
grob = insetplot,
xmin = 20,
xmax = Inf,
ymin = 1,
ymax = Inf
)
de1 <- melt(errdat, id="Variables_used", value.name="err")
insetplot <- ggplotGrob(
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="", y="") +
scale_y_continuous(limits = c(0,0.4), breaks = seq(0,0.5,by = 0.005 )) +
coord_cartesian(ylim=c(0,0.05)) +
theme_classic() + theme(legend.position = "none")
)
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 )) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom") +
annotation_custom(
grob = insetplot,
xmin = 20,
xmax = Inf,
ymin = 1,
ymax = Inf
)
de1 <- melt(errdat, id="Variables_used", value.name="err")
insetplot <- ggplotGrob(
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="", y="") +
scale_y_continuous(limits = c(0,0.4), breaks = seq(0,0.35,by = 0.005 )) +
coord_cartesian(ylim=c(0,0.05)) +
theme_classic() + theme(legend.position = "none")
)
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 )) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom") +
annotation_custom(
grob = insetplot,
xmin = 20,
xmax = Inf,
ymin = 1,
ymax = Inf
)
de1 <- melt(errdat, id="Variables_used", value.name="err")
insetplot <- ggplotGrob(
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="", y="") +
scale_y_continuous(limits = c(0,0.4), breaks = seq(0,0.035,by = 0.005 )) +
coord_cartesian(ylim=c(0,0.05)) +
theme_classic() + theme(legend.position = "none")
)
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 )) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom") +
annotation_custom(
grob = insetplot,
xmin = 20,
xmax = Inf,
ymin = 1,
ymax = Inf
)
de1 <- melt(errdat, id="Variables_used", value.name="err")
insetplot <- ggplotGrob(
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="", y="") +
scale_y_continuous(limits = c(0,0.4), breaks = seq(0,0.035,by = 0.005 )) +
coord_cartesian(ylim=c(0,0.035)) +
theme_classic() + theme(legend.position = "none")
)
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 )) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom") +
annotation_custom(
grob = insetplot,
xmin = 20,
xmax = Inf,
ymin = 1,
ymax = Inf
)
de1 <- melt(errdat, id="Variables_used", value.name="err")
insetplot <- ggplotGrob(
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="", y="") +
scale_y_continuous(limits = c(0,0.4), breaks = seq(0,0.35,by = 0.005 )) +
coord_cartesian(ylim=c(0,0.03)) +
theme_classic() + theme(legend.position = "none")
)
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 )) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom") +
annotation_custom(
grob = insetplot,
xmin = 20,
xmax = Inf,
ymin = 1,
ymax = Inf
)
de1 <- melt(errdat, id="Variables_used", value.name="err")
insetplot <- ggplotGrob(
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="", y="") +
scale_x_continuous(limits = c(0,40), breaks = seq(0,40,by = 5 )) +
scale_y_continuous(limits = c(0,0.4), breaks = seq(0,0.35,by = 0.005 )) +
coord_cartesian(ylim=c(0,0.03)) +
theme_classic() + theme(legend.position = "none")
)
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_x_continuous(limits = c(0,40), breaks = seq(0,40,by = 5 )) +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 )) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom") +
annotation_custom(
grob = insetplot,
xmin = 20,
xmax = Inf,
ymin = 1,
ymax = Inf
)
de1 <- melt(errdat, id="Variables_used", value.name="err")
insetplot <- ggplotGrob(
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="", y="") +
scale_x_continuous(limits = c(4,41), breaks = seq(0,40,by = 5 )) +
scale_y_continuous(limits = c(0,0.4), breaks = seq(0,0.35,by = 0.005 )) +
coord_cartesian(ylim=c(0,0.03)) +
theme_classic() + theme(legend.position = "none")
)
ggplot(data=de1, aes(x=Variables_used, y=err, color=variable)) +
geom_line() +
geom_point() +
labs(x="Number of Predictors", y="Out of Sample Error / %") +
scale_x_continuous(limits = c(4,41), breaks = seq(0,40,by = 5 )) +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,by = 0.5 )) +
scale_color_discrete(name="Data Set", breaks=c("Train","Test"),labels=c("Training","Test")) +
theme_classic() + theme(legend.position = "bottom") +
annotation_custom(
grob = insetplot,
xmin = 20,
xmax = Inf,
ymin = 1,
ymax = Inf
)
modfit <- modfit20
plotmodtrain <- plotter(modfit, train, train$classe)
plotmodtrain
plotmodtest <- plotter(modfit, test, test$classe)
plotmodtest
modfit <- modfit25
plotmodtest <- plotter(modfit, test, test$classe)
plotmodtest
modfit <- modfit20
plotmodtest <- plotter(modfit, test, test$classe)
plotmodtest
p1 <- predict(modfit, train)
p2 <- predict(modfit, test)
cm1 <- confusionMatrix(train$classe, p1)
cm2 <- confusionMatrix(test$classe, p2)
cm1
cm2
a1 <- accu(modfit, train, train$classe)
a2 <- accu(modfit, test, test$classe)
message(c("% Out of sample error (Train/Test) ", a1, "   ", a2))
modfit <- modfit20
plotmodtest <- plotter(modfit, test, test$classe)
plotmodtest
p1 <- predict(modfit, train)
p2 <- predict(modfit, test)
cm1 <- confusionMatrix(train$classe, p1)
cm2 <- confusionMatrix(test$classe, p2)
cm1
cm2
a1 <- accu(modfit, train, train$classe)
a2 <- accu(modfit, test, test$classe)
message(c("% Out of sample error (Train/Test) ", a1, "   ", a2))
?melt
errdat
pred1 <- predict(modfit, test)
cm1 <- confusionMatrix(test$classe, pred1)
cm1
a1 <- accu(modfit, test, test$classe)
message(c("% Out of sample error (Train/Test) ", a1, "   ", a2))
pred1 <- predict(modfit, test)
cm1 <- confusionMatrix(test$classe, pred1)
cm1
a1 <- accu(modfit, test, test$classe)
message(c("Out of sample error on Test set ", a2, "%"))
?confusionMatrix
pred1 <- predict(modfit, test)
cm1 <- confusionMatrix(test$classe, pred1)
cm1.byClass
pred1 <- predict(modfit, test)
cm1 <- confusionMatrix(test$classe, pred1)
cm1$byClass
a1 <- accu(modfit, test, test$classe)
message(c("Out of sample error on test set ", a2, "%"))
?tidyr
plotgbm
?predict
de1 <- melt(errdat, id="Variables_used", value.name="err")
?geom_hline
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(knitr)
options(digits=3)
setwd("~/Documents/Courses/Data_Sci/08_Practical_Machine_Learning/prediction")
set.seed(79173)
accu <- function(model,data,outcome) {
p1 <- predict(model, data)
a1 <- (1 - (sum(p1 == outcome)/length(p1)))*100
a1
}
plotter <- function(model,data,outcome) {
p1 <- predict(model, data)
d1 <- as.data.frame(table(outcome))
colnames(d1) <- c("Actual","ActualFreq")
d2 <- as.data.frame(table(outcome,p1))
colnames(d2) <- c("Actual","Predicted","Freq")
d3 <- merge(d1,d2, by="Actual")
d3$Percent <- d3$Freq/d3$ActualFreq*100
tile <- ggplot() +
geom_tile(aes(x=Actual, y=Predicted,fill=Percent),data=d3, color="black",size=0.1) +
labs(x="Actual",y="Predicted") +
geom_text(aes(x=Actual,y=Predicted, label=sprintf("%.1f", Percent)),data=d3, size=3, colour="black") +
scale_fill_gradient(low="blue",high="red", limits = (c(0,100)), name="%Accuracy") +
theme_classic()
tile
}
library(data.table) # Version 1.11.4
library(car)        # Version 3.0-2
library(caret)      # Verison 3.0-1
library(ggplot2)    # Version 3.0.0
ftrain  <- fread("pml-training.csv")
ftrain$classe <- factor(ftrain$classe)
cols    <- grep("^roll_|^pitch_|^yaw_|^total|^gyros|^accel_|^mag", names(ftrain))
dtrain  <- cbind(classe=ftrain$classe, ftrain[, ..cols])
inTrain <- createDataPartition(y=dtrain$classe, p=0.7, list=FALSE )
train   <- dtrain[inTrain,]
test    <- dtrain[-inTrain,]
train_control <- trainControl(method="cv", number = 10)
modfitgbm <- train(classe ~ .,
data = train,
trControl=train_control,
method = 'gbm',
verbose = FALSE
)
plotgbm <- plotter(modfitgbm, test, test$classe)
a1 <- accu(modfitgbm, train, train$classe)
a2 <- accu(modfitgbm, test, test$classe)
message(c("Out of sample error on trainning and test set ", a1, "%", " and ", a2, "%"))
plotgbm
inflist <- summary(modfitgbm)
inflist
inflist[1:10,2]
inflist[1:10,1]
inflist <- summary(modfitgbm)
inflist[1:10,1]
setwd("~/Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp")
shiny::runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
shiny::runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
setwd("~/Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp")
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
library(shiny)
library(datasets)
library(ggplot2)
library(plotly)
data("cars")
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
?ggplot
s1 <<- if(input$mod1tg){
geom_line(data=f1,aes(x=x,y=y), color="black", size=input$lnwt/2)
} else {
NULL
}
mod1tg = TRUE
s1 <<- if(mod1tg){
geom_line(data=f1,aes(x=x,y=y), color="black", size=input$lnwt/2)
} else {
NULL
}
mod1tg = TRUE
if(mod1tg){
s1 <- "geom_line(data=f1,aes(x=x,y=y), color="black", size=input$lnwt/2)"
mod1tg = TRUE
if(mod1tg){
s1 <- "geom_line(data=f1,aes(x=x,y=y), color=\"black\", size=input$lnwt/2)"
} else {
s1 <- NULL
}
s1
s1
?quote
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
?cars
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
?inputsubmitButton
?inputsubmitButton
library(shiny)
library(datasets)
library(ggplot2)
library(plotly)
data("cars")
?inputsubmitButton
?submitButton
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
runApp('Documents/Courses/Data_Sci/09_Developing_Data_Products/PR_Shiny/myapp')
